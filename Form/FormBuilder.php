<?php

namespace Form;

use Spot\Entity;
use Symfony\Component\HttpFoundation\Request;

class FormBuilder {

	protected $elements;
	protected $entity = null;
	/**
	 * @var Request
	 */
	protected $request;

	protected $formUrl;

	public function __construct() {
		$this->elements = [];
	}

	/**
	 * @param $name
	 * @param string $type
	 * @param array $options
	 * @param null $value
	 */
	public function add( $name, $type = "string", $options = [], $value = null ) {
		$elem = [ "name" => $name, "type" => $type ];
		if ( $this->entity != null && $value == null && $this->entity->$name != null ) {
			$elem['value'] = $this->entity->$name;
		} else if ( $value != null ) {
			$elem['value'] = $value;
		}
		if ( $type == "entity" && $options['class'] === null ) {
			throw new \Exception( "Fields with entity type but no entity class given" );
		}
		if ( $type == "select" && $options['choice'] === null ) {
			throw new \Exception( "Select type but no choice option specified" );
		}
		//option case:
		//we have a lot of option :
		/*
		 * required
		 * label
		 * has_label
		 * class (if its a entity type)
		 * empty_data
		 * mapped (should be filled with database info) by default true
		 * attr (html attributes)
		 * ---- class
		 * ---- id (default autogenerated)
		 *
		 */
		if ( $options['required'] === null ) {
			$options['required'] = true;
		}
		if ( $options['label'] === null ) {
			$options['label'] = $name;
		}
		if ( $options['has_label'] === null ) {
			$options['has_label'] = true;
		}
		if ( $options['mapped'] === null ) {
			$options['mapped'] = true;
		}
		$elem['options'] = $options;

		array_push( $this->elements, $elem );
	}


	/**
	 *
	 */
	public function createView() {
		//todo don't forget to generate input type submit at the end of the file with name : $formNameSubmit
	}

	/**
	 *
	 */
	public function isSubmitted() {
		//on dois gen un bouton avec un name special ET on va ensuite verifier si ce name a été submit

	}

	/**
	 *
	 */
	public function isValid() {
		foreach ( $this->elements as $elem ) {
			if ( $elem['options']['required'] ) {
				if ( $this->request->request->get( $elem['name'] ) === null ) {
					return false;
				}
			}
		}

		return true;
	}

	/**
	 * @param Request $request
	 */
	public function handleRequest( Request $request ) {
		$this->request = $request;
		$this->formUrl = $request->server->get( 'REQUEST_URI' );
		//if si valid on va set toutes les infos de notre entity ici
		if ( $this->isSubmitted() && $this->isValid() ) {
			foreach ( $this->elements as $elem ) {
				$this->entity->set( $elem['name'], $request->request->get( $elem['name'] ) );
			}
		}
	}

	/**
	 * @param  $formTypeClass
	 * @param Entity|null $entity
	 */
	public function createForm( $formTypeClass, Entity $entity = null ) {
		if ( $entity != null ) {
			$this->entity = $entity;
		}

		( new $formTypeClass() )->buildForm( $this );

		return $this;
	}
}