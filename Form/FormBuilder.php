<?php

namespace Form;

use Spot\Entity;
use Symfony\Component\HttpFoundation\Request;

class FormBuilder {

	protected $elements;
	protected $entity = null;
	/**
	 * @var Request
	 */
	protected $request;
	protected $formName = "";
	protected $formUrl;

	public function __construct() {
		$this->elements = [];

	}


	/**
	 * @param $name
	 * @param string $type
	 * @param array $options
	 * @param null $value
	 */
	public function add( $name, $type = "string", $options = [], $value = null ) {
		$elem = [ "name" => $name, "type" => $type ];
		if ( $this->entity != null && $value == null && $this->entity->$name != null ) {
			$elem['value'] = $this->entity->$name;
		} else if ( $value != null ) {
			$elem['value'] = $value;
		}
		if ( $type == "entity" && $options['class'] === null ) {
			throw new \Exception( "Fields with entity type but no entity class given" );
		}
		if ( $type == "select" && $options['choice'] === null ) {
			throw new \Exception( "Select type but no choice option specified" );
		}
		//option case:
		//we have a lot of option :
		/*
		 * required
		 * label
		 * has_label
		 * class (if its a entity type)
		 * empty_data
		 * mapped (should be filled with database info) by default true
		 * attr (html attributes)
		 * ---- class
		 * ---- id (default autogenerated)
		 *
		 */
		if ( $options['required'] === null ) {
			$options['required'] = true;
		}
		if ( $options['label'] === null ) {
			$options['label'] = $name;
		}
		if ( $options['has_label'] === null ) {
			$options['has_label'] = true;
		}
		if ( $options['mapped'] === null ) {
			$options['mapped'] = true;
		}
		if ( $options['attr'] === null || $options['attr']['id'] === null ) {
			$options['attr']['id'] = $name . "Id";
		}
		$elem['options'] = $options;

		array_push( $this->elements, $elem );
	}

	public function formStart() {
		return "<form method='post' action='$this->formUrl'>";
	}

	public function formSubmit() {
		return "<button type='submit' name='" . $this->formName . "Submit" . "' class='btn btn-success'>valider</button>";
	}

	public function formClose() {
		return "</form>";
	}

	/**
	 *
	 */
	public function createView() {
		//todo don't forget to generate input type submit at the end of the file with name : $formName."Submit"
		$str = "";
		foreach ( $this->elements as $elem ) {

			if ( $elem['type'] == "checkbox" || $elem['type'] == "radio" ) {

				$str .= "<div class='form-check row'>";

				$str .= "<input class='form-check-input mt-2 ";
				if ( $elem['options']['attr']['class'] !== null ) {
					$str .= $elem['options']['attr']['class'];
				}
				$str .= "' type='" . $elem['type'] . "' id='" . $elem['options']['attr']['id'] . "' name='" . $elem['name'] . "'>";
				$str .= "<label class='ml-4 form-check-label' for='" . $elem['options']['attr']['id'] . "'>" . $elem['options']['label'] . "</label>";
				$str .= "</div>";


			} else {
				$str .= "<div class='form-group'>";
				$str .= " <label for='" . $elem['options']['attr']['id'] . "'>" . $elem['options']['label'] . "</label>";
				if ( $elem['type'] == "text" ) {
					$str .= "<textarea class='form-control ";
					if ( $elem['options']['attr']['class'] !== null ) {
						$str .= $elem['options']['attr']['class'];
					}
					$str .= "' name='" . $elem['name'] . "' id='" . $elem['options']['attr']['id'] . "'></textarea>";

				} else if ( $elem['type'] == "select" || $elem['type'] == 'entity' ) {
					$str .= "<select class='form-control ";
					if ( $elem['options']['attr']['class'] !== null ) {
						$str .= $elem['options']['attr']['class'];
					}
					$str .= "' name='" . $elem['name'] . "' id='" . $elem['options']['attr']['id'] . "'>";
					foreach ( $elem['options']['choice'] as $key => $value ) {
						$str .= "<option value='" . $key . "'>$value</option>";
					}
					$str .= "</select>";
				} else {
					if ( $elem['type'] == "string" ) {
						$elem['type'] = "text";
					}
					$str .= "<input type='" . $elem['type'] . "' class='form-control ";
					if ( $elem['options']['attr']['class'] !== null ) {
						$str .= $elem['options']['attr']['class'];
					}
					$str .= "' id='" . $elem['options']['attr']['id'] . "' name='" . $elem['name'] . "' ";
					if ( $elem['options']['attr']['placeholder'] !== null ) {
						$str .= "placeholder='" . $elem['options']['attr']['placeholder'] . "'";
					}

				}
				$str .= " </div>";
			}
		}

		return $str;
	}

	/**
	 *
	 */
	public function isSubmitted() {
		return $this->request->request->get( $this->formName . "Submit" ) !== null;
	}

	/**
	 *
	 */
	public function isValid() {
		foreach ( $this->elements as $elem ) {
			if ( $elem['options']['required'] ) {
				if ( $this->request->request->get( $elem['name'] ) == null ) {
					return false;
				}
			}
		}

		return true;
	}

	/**
	 * @param Request $request
	 */
	public function handleRequest( Request $request ) {
		$this->request = $request;
		$this->formUrl = $request->server->get( 'REQUEST_URI' );
		if ( $this->isSubmitted() && $this->isValid() ) {
			foreach ( $this->elements as $elem ) {
				//todo watchout to htmlspecialchars() except if type is ckeditor
				$this->entity->set( $elem['name'], $request->request->get( $elem['name'] ) );
			}
		}
	}

	/**
	 * @param  $formTypeClass
	 * @param Entity|null $entity
	 */
	public function createForm( $formTypeClass, Entity $entity = null ) {
		if ( $entity != null ) {
			$this->entity = $entity;
		}
		$this->formName = str_replace( "Form\\", "", $formTypeClass );
		( new $formTypeClass() )->buildForm( $this );

		return $this;
	}
}